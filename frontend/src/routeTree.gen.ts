/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthImport } from './routes/_auth'
import { Route as LoginImport } from './routes/login'

// Create Virtual Routes

const AuthIndexLazyImport = createFileRoute('/_auth/')()
const AuthClearCuttingsMapLazyImport = createFileRoute(
  '/_auth/clear-cuttings/map',
)()
const AuthClearCuttingsListLazyImport = createFileRoute(
  '/_auth/clear-cuttings/list',
)()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexLazyRoute = AuthIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any).lazy(() => import('./routes/_auth.index.lazyx.lazy').then((d) => d.Route))

const AuthClearCuttingsMapLazyRoute = AuthClearCuttingsMapLazyImport.update({
  id: '/clear-cuttings/map',
  path: '/clear-cuttings/map',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.clear-cuttings.map.lazy').then((d) => d.Route),
)

const AuthClearCuttingsListLazyRoute = AuthClearCuttingsListLazyImport.update({
  id: '/clear-cuttings/list',
  path: '/clear-cuttings/list',
  getParentRoute: () => AuthRoute,
} as any).lazy(() =>
  import('./routes/_auth.clear-cuttings.list.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/clear-cuttings/list': {
      id: '/_auth/clear-cuttings/list'
      path: '/clear-cuttings/list'
      fullPath: '/clear-cuttings/list'
      preLoaderRoute: typeof AuthClearCuttingsListLazyImport
      parentRoute: typeof AuthImport
    }
    '/_auth/clear-cuttings/map': {
      id: '/_auth/clear-cuttings/map'
      path: '/clear-cuttings/map'
      fullPath: '/clear-cuttings/map'
      preLoaderRoute: typeof AuthClearCuttingsMapLazyImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthIndexLazyRoute: typeof AuthIndexLazyRoute
  AuthClearCuttingsListLazyRoute: typeof AuthClearCuttingsListLazyRoute
  AuthClearCuttingsMapLazyRoute: typeof AuthClearCuttingsMapLazyRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthIndexLazyRoute: AuthIndexLazyRoute,
  AuthClearCuttingsListLazyRoute: AuthClearCuttingsListLazyRoute,
  AuthClearCuttingsMapLazyRoute: AuthClearCuttingsMapLazyRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/': typeof AuthIndexLazyRoute
  '/clear-cuttings/list': typeof AuthClearCuttingsListLazyRoute
  '/clear-cuttings/map': typeof AuthClearCuttingsMapLazyRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/': typeof AuthIndexLazyRoute
  '/clear-cuttings/list': typeof AuthClearCuttingsListLazyRoute
  '/clear-cuttings/map': typeof AuthClearCuttingsMapLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/_auth/': typeof AuthIndexLazyRoute
  '/_auth/clear-cuttings/list': typeof AuthClearCuttingsListLazyRoute
  '/_auth/clear-cuttings/map': typeof AuthClearCuttingsMapLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/'
    | '/clear-cuttings/list'
    | '/clear-cuttings/map'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/' | '/clear-cuttings/list' | '/clear-cuttings/map'
  id:
    | '__root__'
    | '/_auth'
    | '/login'
    | '/_auth/'
    | '/_auth/clear-cuttings/list'
    | '/_auth/clear-cuttings/map'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/",
        "/_auth/clear-cuttings/list",
        "/_auth/clear-cuttings/map"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_auth/": {
      "filePath": "_auth.index.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/clear-cuttings/list": {
      "filePath": "_auth.clear-cuttings.list.lazy.tsx",
      "parent": "/_auth"
    },
    "/_auth/clear-cuttings/map": {
      "filePath": "_auth.clear-cuttings.map.lazy.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
